name: syzhetfastapi workflow

on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.10.4
    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        # pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install flake8
        pip install -r requirements.txt
    - name: Test with flake8
      run: |
        python -m flake8
    # - name: Test with pytest
    #   run: |
    #     pytest
    
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push khasbot to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          context: ./
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/syzhet_fastapi:${{ secrets.API_TAG }}
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd syzhet_fastapi/
            sudo docker-compose stop
            sudo docker-compose rm -f api
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/syzhet_fastapi:${{ secrets.API_TAG }}
            rm .env
            touch .env
            echo ADMIN__ALGORITM=${{ secrets.ADMIN__ALGORITM }} >> .env
            echo ADMIN__DELIMETR=${{ secrets.ADMIN__DELIMETR }} >> .env
            echo ADMIN__LOGIN=${{ secrets.ADMIN__LOGIN }} >> .env
            echo ADMIN__PASSWORD=${{ secrets.ADMIN__PASSWORD }} >> .env
            echo ADMIN__SECRET_KEY=${{ secrets.ADMIN__SECRET_KEY }} >> .env
            echo ADMIN__TOKEN_EXPIRE=${{ secrets.ADMIN__TOKEN_EXPIRE }} >> .env

            echo API_TAG=${{ secrets.API_TAG }} >> .env

            echo APP__APP_HOST=${{ secrets.APP__APP_HOST }} >> .env
            echo APP__APP_PORT=${{ secrets.APP__APP_PORT }} >> .env

            echo DB_TAG=${{ secrets.DB_TAG }} >> .env
            echo DB__DATABASE=${{ secrets.DB__DATABASE }} >> .env
            echo DB__DB_HOST=${{ secrets.DB__DB_HOST }} >> .env
            echo DB__DB_PASSWORD=${{ secrets.DB__DB_PASSWORD }} >> .env
            echo DB__DB_PORT=${{ secrets.DB__DB_PORT }} >> .env
            echo DB__DB_USER=${{ secrets.DB__DB_USER }} >> .env

            echo NGINX_TAG=${{ secrets.NGINX_TAG }} >> .env

            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env

            echo DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} >> .env

            sudo docker-compose build --no-cache
            sudo docker-compose up -d --build

            sudo docker-compose exec -T api bash start.sh
            sudo docker-compose run --rm  certbot certonly --webroot --email ${{ secrets.CERTBOT_EMAIL }} --agree-tos --webroot-path /var/www/certbot/ -d khasguz.ddns.net
            sudo docker-compose restart nginx
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!